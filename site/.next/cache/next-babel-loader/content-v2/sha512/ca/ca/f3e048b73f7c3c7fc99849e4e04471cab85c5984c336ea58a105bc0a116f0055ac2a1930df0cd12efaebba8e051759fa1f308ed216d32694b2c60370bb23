{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\imersao_reactjs_nodejs_e_reactnative\\\\site\\\\pages\\\\cadastrar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\n\nfunction Cadastrar() {\n  const {\n    0: meta,\n    1: setMeta\n  } = useState({\n    /** objeto de posição  */\n    name: '',\n    description: '',\n    status: ''\n  });\n  const {\n    0: response,\n    1: setResponse\n  } = useState({\n    // usar para infomar o erro na tela\n    formSave: false,\n    type: '',\n    message: ''\n  });\n\n  const onChangeInput = e => setMeta(_objectSpread(_objectSpread({}, meta), {}, {\n    [e.target.name]: e.target.value\n  }));\n\n  const sendMeta = async e => {\n    // async = espera\n    e.preventDefault(); // para não atualizar a página\n\n    setResponse({\n      formSave\n    });\n\n    try {\n      const res = await fetch('http://localhost:3002/metas', {\n        //enviando metas\n        method: 'POST',\n        body: JSON.stringify(meta),\n        // enviando metas em json\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const responseEnv = await res.json();\n\n      if (responseEnv.error) {\n        setResponse({\n          formSave: false,\n          type: 'error',\n          message: responseEnv.message\n        });\n      } else {\n        setResponse({\n          formSave: false,\n          type: 'sucess',\n          message: responseEnv.message\n        });\n      }\n    } catch (err) {\n      //não conseguindo acessa a api , acessa o catch\n      setResponse({\n        formSave: false,\n        type: 'error',\n        message: \"Erro meta não cadastrada\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cadastrar Minha Meta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 6\n    }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: response.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 35\n    }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: response.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 37\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMeta,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Nome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        id: \"name\",\n        placeholder: \"Nome de meta\",\n        onChange: onChangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 10\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Descri\\xE7\\xE3o \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"description\",\n        id: \"\",\n        placeholder: \"Descri\\xE7\\xE3o da meta\",\n        onChange: onChangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 10\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"status\",\n        id: \"status\",\n        placeholder: \"Status de meta\",\n        onChange: onChangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 10\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Cadastrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 10\n      }, this), response.formSave ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Enviando\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Cadastrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 73\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n}\n\nexport default Cadastrar;","map":{"version":3,"sources":["C:/imersao_reactjs_nodejs_e_reactnative/site/pages/cadastrar.js"],"names":["React","useState","Cadastrar","meta","setMeta","name","description","status","response","setResponse","formSave","type","message","onChangeInput","e","target","value","sendMeta","preventDefault","res","fetch","method","body","JSON","stringify","headers","responseEnv","json","error","err"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction Cadastrar(){\r\n\r\n    const [meta, setMeta] = useState({ /** objeto de posição  */\r\n        name:'',\r\n        description:'',\r\n        status:'',\r\n    });\r\n\r\n    const [response, setResponse] = useState({ // usar para infomar o erro na tela\r\n        formSave:false,\r\n        type:'',\r\n        message:''\r\n    })\r\n\r\n\r\n    const onChangeInput = e => setMeta({...meta,[e.target.name]: e.target.value});\r\n\r\n    const sendMeta = async e => {  // async = espera\r\n        e.preventDefault(); // para não atualizar a página\r\n\r\n        setResponse({formSave})\r\n\r\n        try{\r\n        const res = await fetch('http://localhost:3002/metas',{  //enviando metas\r\n        method:'POST',\r\n        body:JSON.stringify(meta),   // enviando metas em json\r\n        headers:{'Content-Type': 'application/json'}\r\n\r\n        });\r\n\r\n        const responseEnv = await res.json();\r\n\r\n        if(responseEnv.error){\r\n            setResponse({\r\n                formSave:false,\r\n                type:'error',\r\n                message:responseEnv.message\r\n            });\r\n        }else{\r\n            setResponse({\r\n            formSave:false,\r\n            type:'sucess',\r\n            message:responseEnv.message\r\n        });\r\n            \r\n        }\r\n\r\n        }catch(err){    //não conseguindo acessa a api , acessa o catch\r\n            setResponse({\r\n                formSave:false,\r\n                type:'error',\r\n                message:\"Erro meta não cadastrada\"\r\n            });                          \r\n    }\r\n}\r\n\r\n    return (\r\n        <> {/* div vazia por causa de duas linhas */}\r\n     <h1>Cadastrar Minha Meta</h1> \r\n     <hr />\r\n\r\n        {response.type==='error'? <p>{response.message}</p>:\"\"}\r\n        {response.type==='success'? <p>{response.message}</p>:\"\"}\r\n\r\n     <form onSubmit={sendMeta}>\r\n         <label>Nome</label>\r\n         <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Nome de meta\" onChange={onChangeInput}></input> \r\n         <br /> <br />\r\n         <label>Descrição </label>\r\n         <input type=\"text\" name=\"description\" id=\"\" placeholder=\"Descrição da meta\"onChange={onChangeInput}></input>\r\n         <br /> <br />\r\n         <label>Status</label>\r\n         <input type=\"text\" name=\"status\" id=\"status\" placeholder=\"Status de meta\"onChange={onChangeInput}></input>\r\n         <br /> <br />\r\n         <button type=\"submit\">Cadastrar</button>\r\n         {response.formSave ? <button type=\"submit\">Enviando</button>:  <button type=\"submit\">Cadastrar</button> }\r\n\r\n     </form>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Cadastrar;"]},"metadata":{},"sourceType":"module"}