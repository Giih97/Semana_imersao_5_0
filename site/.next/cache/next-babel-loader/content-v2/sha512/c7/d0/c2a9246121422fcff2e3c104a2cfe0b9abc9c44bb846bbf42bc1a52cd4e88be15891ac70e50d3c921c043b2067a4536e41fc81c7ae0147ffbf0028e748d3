{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\imersao_reactjs_nodejs_e_reactnative\\\\site\\\\pages\\\\cadastrar.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nfunction Cadastrar() {\n  _s();\n\n  var _useState = useState({\n    /** objeto de posição  */\n    name: '',\n    description: '',\n    status: ''\n  }),\n      meta = _useState[0],\n      setMeta = _useState[1];\n\n  var _useState2 = useState({\n    // usar para infomar o erro na tela\n    formSave: false,\n    type: '',\n    message: ''\n  }),\n      response = _useState2[0],\n      setResponse = _useState2[1];\n\n  var onChangeInput = function onChangeInput(e) {\n    return setMeta(_objectSpread(_objectSpread({}, meta), {}, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var sendMeta = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var res, responseEnv;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // async = espera\n              e.preventDefault(); // para não atualizar a página\n\n              setResponse({\n                formSave: true\n              });\n              _context.prev = 2;\n              _context.next = 5;\n              return fetch('http://localhost:3002/metas', {\n                //enviando metas\n                method: 'POST',\n                body: JSON.stringify(meta),\n                // enviando metas em json\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 5:\n              res = _context.sent;\n              _context.next = 8;\n              return res.json();\n\n            case 8:\n              responseEnv = _context.sent;\n\n              if (responseEnv.error) {\n                setResponse({\n                  formSave: false,\n                  type: 'error',\n                  message: responseEnv.message\n                });\n              } else {\n                setResponse({\n                  formSave: false,\n                  type: 'sucess',\n                  message: responseEnv.message\n                });\n              }\n\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](2);\n              //não conseguindo acessa a api , acessa o catch\n              setResponse({\n                formSave: false,\n                type: 'error',\n                message: \"Erro meta não cadastrada\"\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 12]]);\n    }));\n\n    return function sendMeta(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"style\", {\n        children: \".form{\\n                    background-color:#6A5ACD;\\n                    color:#800000;\\n                    padding-top: 30px;\\n                    \\n                }\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cadastrar Minha Meta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 6\n      }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 35\n      }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 37\n      }, this) : \"\", /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMeta,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Nome\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          id: \"name\",\n          placeholder: \"Nome de meta\",\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 10\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Descri\\xE7\\xE3o \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"description\",\n          id: \"\",\n          placeholder: \"Descri\\xE7\\xE3o da meta\",\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 10\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"status\",\n          id: \"status\",\n          placeholder: \"Status de meta\",\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 10\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this), response.formSave ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: true,\n          children: \"Enviando...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 31\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Cadastrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 86\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Cadastrar, \"uBX07iNyraoU//EiZ12VtRUQqQs=\");\n\n_c = Cadastrar;\nexport default Cadastrar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cadastrar\");","map":{"version":3,"sources":["C:/imersao_reactjs_nodejs_e_reactnative/site/pages/cadastrar.js"],"names":["React","useState","Jumbotron","Cadastrar","name","description","status","meta","setMeta","formSave","type","message","response","setResponse","onChangeInput","e","target","value","sendMeta","preventDefault","fetch","method","body","JSON","stringify","headers","res","json","responseEnv","error"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport {Jumbotron,} from 'reactstrap'\r\n\r\nfunction Cadastrar(){\r\n\r\n    const [meta, setMeta] = useState({ /** objeto de posição  */\r\n        name:'',\r\n        description:'',\r\n        status:'',\r\n    });\r\n\r\n    const [response, setResponse] = useState({ // usar para infomar o erro na tela\r\n        formSave:false,\r\n        type:'',\r\n        message:''\r\n    })\r\n\r\n\r\n    const onChangeInput = e => setMeta({...meta,[e.target.name]: e.target.value});\r\n\r\n    const sendMeta = async e => {  // async = espera\r\n        e.preventDefault(); // para não atualizar a página\r\n\r\n        setResponse({formSave:true})\r\n\r\n        try{\r\n        const res = await fetch('http://localhost:3002/metas',{  //enviando metas\r\n        method:'POST',\r\n        body:JSON.stringify(meta),   // enviando metas em json\r\n        headers:{'Content-Type': 'application/json'}\r\n\r\n        });\r\n\r\n        const responseEnv = await res.json();\r\n\r\n        if(responseEnv.error){\r\n            setResponse({\r\n                formSave:false,\r\n                type:'error',\r\n                message:responseEnv.message\r\n            });\r\n        }else{\r\n            setResponse({\r\n            formSave:false,\r\n            type:'sucess',\r\n            message:responseEnv.message\r\n        });\r\n            \r\n        }\r\n\r\n        }catch(err){    //não conseguindo acessa a api , acessa o catch\r\n            setResponse({\r\n                formSave:false,\r\n                type:'error',\r\n                message:\"Erro meta não cadastrada\"\r\n            });                          \r\n    }\r\n}\r\n\r\n    return (\r\n        <> {/* div vazia por causa de duas linhas */}\r\n        <Jumbotron fluid className=\"form\">\r\n            <style>\r\n                {`.form{\r\n                    background-color:#6A5ACD;\r\n                    color:#800000;\r\n                    padding-top: 30px;\r\n                    \r\n                }`}\r\n            </style>\r\n     <h1>Cadastrar Minha Meta</h1>  \r\n     <hr />\r\n\r\n        {response.type==='error'? <p>{response.message}</p>:\"\"}\r\n        {response.type==='success'? <p>{response.message}</p>:\"\"}\r\n\r\n     <form onSubmit={sendMeta}>\r\n         <label>Nome</label>\r\n         <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Nome de meta\" onChange={onChangeInput}></input> \r\n         <br /> <br />\r\n         <label>Descrição </label>\r\n         <input type=\"text\" name=\"description\" id=\"\" placeholder=\"Descrição da meta\"onChange={onChangeInput}></input>\r\n         <br /> <br />\r\n         <label>Status</label>\r\n         <input type=\"text\" name=\"status\" id=\"status\" placeholder=\"Status de meta\"onChange={onChangeInput}></input>\r\n         <br /> <br />\r\n   \r\n         {response.formSave ? <button type=\"submit\" disabled>Enviando...</button> :  <button type=\"submit\">Cadastrar</button> }\r\n\r\n     </form>\r\n     </Jumbotron>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Cadastrar;"]},"metadata":{},"sourceType":"module"}